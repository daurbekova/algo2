C#
using System;
using System.Collections.Generic;

public class TreeNode
{
    public int val;
    public TreeNode left;
    public TreeNode right;

    public TreeNode(int val = 0, TreeNode left = null, TreeNode right = null)
    {
        this.val = val;
        this.left = left;
        this.right = right;
    }
}

public class Program
{
    public static void ToDo(TreeNode node, List<int> lst)
    {
        if (node == null)
            return;
        ToDo(node.left, lst);
        ToDo(node.right, lst);
        lst.Add(node.val);
    }

    public static void PrintList(List<int> lst)
    {
        string output = "";
        foreach (int x in lst)
        {
            output += x.ToString() + " ";
        }
        Console.WriteLine(output.Trim());
    }

    public static TreeNode TreeTest1()
    {
        TreeNode tree = new TreeNode(1);
        tree.left = new TreeNode(2);
        tree.right = new TreeNode(3);
        tree.right.left = new TreeNode(3);
        tree.right.right = new TreeNode(4);
        return tree;
    }

    public static TreeNode TreeTest2()
    {
        TreeNode tree = new TreeNode(1);
        tree.right = new TreeNode(2);
        tree.right.left = new TreeNode(3);
        return tree;
    }

    public static TreeNode TreeTest3()
    {
        return null;
    }

    public static TreeNode TreeTest4()
    {
        return new TreeNode(1);
    }

    public static TreeNode GetTreeTest(string s)
    {
        if (s == "1 2 3 null null 3 4")
            return TreeTest1();
        else if (s == "1 null 2 3")
            return TreeTest2();
        else if (s == "")
            return TreeTest3();
        else if (s == "1")
            return TreeTest4();
        else
            return null;
    }

    public static void Main(string[] args)
    {
        string terminal = Console.ReadLine();

        List<int> outputNode = new List<int>();
        ToDo(GetTreeTest(terminal), outputNode);
        PrintList(outputNode);
    }
}
___________________________________________________
class TreeNode:
    def __init__(self, val=0, left=None, right=None):
        self.val = val
        self.left = left
        self.right = right

def todo(node, lst):
    if node is None:
        return
    todo(node.left, lst)
    todo(node.right, lst)
    lst.append(node.val)

def print_list(lst):
    output = " ".join(map(str, lst))
    print(output)

def tree_test_1():
    tree = TreeNode(1)
    tree.left = TreeNode(2)
    tree.right = TreeNode(3)
    tree.right.left = TreeNode(3)
    tree.right.right = TreeNode(4)
    return tree

def tree_test_2():
    tree = TreeNode(1)
    tree.right = TreeNode(2)
    tree.right.left = TreeNode(3)
    return tree

def tree_test_3():
    return None

def tree_test_4():
    return TreeNode(1)

def get_tree_test(s):
    if s == "1 2 3 null null 3 4":
        return tree_test_1()
    elif s == "1 null 2 3":
        return tree_test_2()
    elif s == "":
        return tree_test_3()
    elif s == "1":
        return tree_test_4()
    else:
        return None

if __name__ == "__main__":
    terminal = input().strip()

    output_node = []
    todo(get_tree_test(terminal), output_node)
    print_list(output_node)
